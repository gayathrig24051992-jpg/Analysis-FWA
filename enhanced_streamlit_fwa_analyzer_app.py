# -*- coding: utf-8 -*-
"""Enhanced Streamlit FWA Analyzer App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mMEFHevKND2R8udBOChYc_Y1RnEpL6We
"""

# -*- coding: utf-8 -*-


import streamlit as st
import boto3
import os
import uuid
from PyPDF2 import PdfReader
import base64
from io import BytesIO

# --- Configuration (Fixed to use st.secrets) ---
# IMPORTANT: Before running, create a .streamlit/secrets.toml file with your
# AWS credentials. Example:
# [aws]
# aws_access_key_id = "YOUR_AWS_ACCESS_KEY_ID"
# aws_secret_access_key = "YOUR_AWS_SECRET_ACCESS_KEY"
# aws_region = "ap-south-1"
# [bedrock]
# agent_id = "5GILSDVVQO"
# agent_alias_id = "TSTALIASID"

try:
    AWS_ACCESS_KEY_ID = st.secrets["aws"]["aws_access_key_id"]
    AWS_SECRET_ACCESS_KEY = st.secrets["aws"]["aws_secret_access_key"]
    AWS_REGION = st.secrets["aws"].get("aws_region", "ap-south-1")
    AGENT_ID = st.secrets["bedrock"]["agent_id"]
    AGENT_ALIAS_ID = st.secrets["bedrock"]["agent_alias_id"]
except KeyError as e:
    st.error(f"Configuration Error: Missing Streamlit secret `{e}`. "
             f"Please set your AWS and Bedrock credentials in `.streamlit/secrets.toml` or via the Streamlit Cloud UI.")
    st.stop()


# --- Helper Functions ---

def extract_text_from_pdf_pages(uploaded_file, pages):
    """
    Extracts text from specified pages of an uploaded PDF file.
    """
    text = ""
    try:
        reader = PdfReader(uploaded_file)
        page_indices = [p - 1 for p in pages if 0 < p <= len(reader.pages)]
        for i in page_indices:
            page_text = reader.pages[i].extract_text()
            if page_text:
                text += f"--- Page {i+1} ---\n{page_text}\n\n"
        return text.strip()
    except Exception as e:
        st.error(f"Error reading PDF: {e}")
        return ""

def query_bedrock_agent(text, prompt_prefix=""):
    """
    Sends text to a Bedrock Agent and retrieves the response.
    This version correctly passes credentials to the Boto3 client.
    """
    try:
        # Pass credentials to the client call
        client = boto3.client(
            'bedrock-agent-runtime',
            region_name=AWS_REGION,
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY
        )
        session_id = str(uuid.uuid4())

        full_prompt = (
            f"{prompt_prefix}\n\n"
            "Here is the context of the medical claim:\n"
            f"{text}"
        )

        st.info(f"Invoking Bedrock Agent (ID: {AGENT_ID}, Alias: {AGENT_ALIAS_ID}) in region: {AWS_REGION}...")

        response = client.invoke_agent(
            agentId=AGENT_ID,
            agentAliasId=AGENT_ALIAS_ID,
            sessionId=session_id,
            inputText=full_prompt
        )

        completion = ""
        for event in response['completion']:
            chunk = event.get('chunk')
            if chunk and 'bytes' in chunk:
                completion += chunk['bytes'].decode('utf-8')

        # If the completion is empty, return the custom message
        if not completion:
            return "I DO NOT HAVE ANSWER AT PRESENT"

        return completion

    except Exception as e:
        st.error(f"Error invoking Bedrock agent: {e}")
        st.warning("Please ensure your AWS credentials are correctly configured and the Bedrock Agent is 'AVAILABLE'.")
        return "I DO NOT HAVE ANSWER AT PRESENT"

def display_pdf_viewer(uploaded_file_bytes):
    """
    Displays the uploaded PDF in an embedded iframe using base64 encoding.
    NOTE: Browsers may block this on insecure (http) connections.
    """
    base64_pdf = base64.b64encode(uploaded_file_bytes).decode('utf-8')
    pdf_display = f"""
    <iframe
        src="data:application/pdf;base64,{base64_pdf}"
        width="100%"
        height="600"
        type="application/pdf"
        style="border: 2px solid #ddd; border-radius: 8px;">
    </iframe>"""
    st.components.v1.html(pdf_display, height=600, scrolling=True)

def display_pdf_download_link(uploaded_file_bytes, filename):
    """
    Provides a download link for the PDF as an alternative to the embedded viewer.
    """
    st.download_button(
        label="Download PDF",
        data=uploaded_file_bytes,
        file_name=filename,
        mime="application/pdf"
    )

# --- Streamlit App Layout ---
st.set_page_config(page_title="Medisight AI", layout="wide", initial_sidebar_state="expanded")

st.title("üè• Medisight AI : Healthcare Claims Processing Agent")
st.markdown("""
advanced Agentic AI system built on AWS Bedrock, designed to revolutionize healthcare claims processing. By leveraging sophisticated large language models and document analysis capabilities, it automatically processes, validates, and scrutinizes healthcare claims documents for potential instances of Fraud, Waste, and Abuse (FWA). Medisight AI acts as a Proactive, Intelligent and Automated Defence System against Fraud, Waste, and Abuse(FWA) in Healthcare Claims Processing, providing a comprehensive layer of security and efficiency to protect against financial losses, streamline administrative workflows, and ensure the integrity of the claims lifecycle..
""")

# --- State Management Initialization ---
if 'uploaded_file_name' not in st.session_state:
    st.session_state['uploaded_file_name'] = None
if 'pdf_text' not in st.session_state:
    st.session_state['pdf_text'] = ""
if 'agent_response' not in st.session_state:
    st.session_state['agent_response'] = None
if 'pdf_pages' not in st.session_state:
    st.session_state['pdf_pages'] = []
if 'chat_history' not in st.session_state:
    st.session_state['chat_history'] = []

# --- Left Column: Input and Control Panel ---
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("üìÅ Claim Document & Settings")

    uploaded_file = st.file_uploader("Upload a Medical Claim PDF", type="pdf", key="file_uploader")

    if uploaded_file:
        # Create a new BytesIO object from the uploaded file
        uploaded_file_bytes = uploaded_file.getvalue()

        # If a new file is uploaded, reset session state variables
        if uploaded_file.name != st.session_state.uploaded_file_name:
            st.session_state.uploaded_file_name = uploaded_file.name
            st.session_state.pdf_text = ""
            st.session_state.agent_response = None
            st.session_state.pdf_pages = []
            st.session_state.chat_history = []

        pdf_reader = PdfReader(BytesIO(uploaded_file_bytes))
        total_pages = len(pdf_reader.pages)
        st.info(f"PDF has {total_pages} page(s).")

        page_options = list(range(1, total_pages + 1))
        selected_pages = st.multiselect(
            "Select pages for analysis:",
            options=page_options,
            default=page_options,
            help="Choose the pages you want the AI to analyze."
        )

        st.session_state.pdf_pages = selected_pages

    st.markdown("---")

    if st.button("üöÄ Analyze Claim", use_container_width=True):
        if uploaded_file is None:
            st.error("Please upload a PDF file first.")
        elif not st.session_state.pdf_pages:
            st.warning("Please select at least one page for analysis.")
        else:
            with st.spinner("Extracting text from PDF..."):
                pdf_text = extract_text_from_pdf_pages(
                    BytesIO(uploaded_file.getvalue()),
                    st.session_state.pdf_pages
                )

            st.session_state['pdf_text'] = pdf_text

            if st.session_state['pdf_text']:
                with st.spinner("üß† Sending text to Bedrock Agent for initial analysis..."):
                    initial_prompt = "Please analyze the following medical claim for potential Fraud, Waste, and Abuse. Provide a detailed and concise report based on the provided text."
                    agent_response = query_bedrock_agent(st.session_state['pdf_text'], initial_prompt)

                st.session_state['agent_response'] = agent_response
                st.session_state['chat_history'].append({"role": "assistant", "content": agent_response})

    if st.button("üîÑ Reset App", use_container_width=True):
        st.session_state.clear()
        st.experimental_rerun()

    with st.expander("Advanced Configuration"):
        st.text_input("Bedrock Agent ID", value=AGENT_ID, disabled=True)
        st.text_input("Bedrock Agent Alias ID", value=AGENT_ALIAS_ID, disabled=True)
        st.text_input("AWS Region", value=AWS_REGION, disabled=True)

with col2:
    if uploaded_file:
        st.subheader("üìÑ PDF Document Viewer")
        st.info("If the PDF viewer is blocked, please check your browser settings or use the download link below.")

        # Pass the bytes directly
        display_pdf_viewer(uploaded_file.getvalue())
        display_pdf_download_link(uploaded_file.getvalue(), uploaded_file.name)

        st.markdown("---")
        st.subheader("üìã Extracted Text (for Review)")
        if st.session_state.pdf_text:
            st.text_area("Extracted Text", st.session_state.pdf_text, height=200, disabled=True)
        else:
            st.info("The extracted text will appear here after you click 'Analyze Claim'.")

    # The new chat interface
    st.subheader("üîç FWA Analysis & AI Assistant")
    if st.session_state['agent_response']:
        st.success("‚úÖ Analysis Complete! You can now ask follow-up questions.")

        # Display the chat history
        for message in st.session_state['chat_history']:
            if message["role"] == "user":
                with st.chat_message("user", avatar="üôã‚Äç‚ôÇÔ∏è"):
                    st.write(message["content"])
            else:
                with st.chat_message("assistant", avatar="ü§ñ"):
                    st.write(message["content"])

        # New buttons for user actions
        st.markdown("---")
        st.subheader("Actions")
        action_col1, action_col2 = st.columns(2)
        with action_col1:
            if st.button("‚ùì Explain Rejection Basis", use_container_width=True):
                with st.spinner("ü§ñ Thinking..."):
                    # Use a specific prompt for this action
                    prompt = "Explain why this claim might be rejected based on the provided text, and what steps could be taken to resolve it."
                    response = query_bedrock_agent(st.session_state['pdf_text'], prompt)
                st.session_state['chat_history'].append({"role": "assistant", "content": response})
                st.rerun()

        with action_col2:
            if st.button("‚úÖ Submit for Reprocessing", use_container_width=True):
                st.success("Claim has been submitted for reprocessing. Please check your dashboard for updates.")
                # This is a conceptual action for demo purposes

        # Chat input for follow-up questions
        user_query = st.chat_input("Ask a follow-up question about the claim analysis...")
        if user_query:
            # Add user query to chat history
            st.session_state['chat_history'].append({"role": "user", "content": user_query})
            with st.chat_message("user", avatar="üôã‚Äç‚ôÇÔ∏è"):
                st.write(user_query)

            # Get response from AI agent
            with st.spinner("ü§ñ Thinking..."):
                follow_up_prompt = f"Based on the provided claim text, {user_query}"
                response = query_bedrock_agent(st.session_state['pdf_text'], follow_up_prompt)

            # Add assistant response to chat history
            st.session_state['chat_history'].append({"role": "assistant", "content": response})
            with st.chat_message("assistant", avatar="ü§ñ"):
                st.write(response)

    elif uploaded_file:
        st.info("Click 'Analyze Claim' to view the initial report and start the Q&A.")
    else:
        st.info("Upload a PDF file to begin the FWA analysis.")